# Docker images registry
# This registry will be used for automatic docker image name deduction based on Legion naming for images
# Each image could be overridden manually in .<service>.image, please see .edi root section or other
# Type: string
imagesRegistry: odahu/

# Odahuflow API url
# Type: string
apiUrl: http://odahu-flow-api.odahu-flow.svc.cluster.local

# Version of Packagers
# By default .Chart.AppVersion version is used
# Type: string
# packagerVersion: "1.0"

# Odahuflow CLI
odahuflowctl:
  # This variable can be uncommented to setup custom image name
  # Type: string
  # image: custom-image:1.0

packagers:
  base:
    # This variable can be uncommented to setup custom image name for base docker packager
    # Type: string
    # image: custom-image:1.0

  rest:
    # REST packager could be disabled
    # Type: bool
    enabled: true

    # Targets configuration
    # Type: dict
    targets:
      # Configuration of docker-push target
      # Type: dict
      docker_push:
        # Default connection ID
        # Type: str
        default: ""
      # Configuration of docker-push target
      # Type: dict
      docker_pull:
        # Default connection ID
        # Type: str
        default: ""

    # This variable can be uncommented to setup custom image name for REST packager
    # Type: string
    # image: custom-image:1.0

  cli:
    # CLI packager could be disabled
    # Type: bool
    enabled: true

    # Targets configuration
    # Type: dict
    targets:
      # Configuration of docker-push target
      # Type: dict
      docker_push:
        # Default connection ID
        # Type: str
        default: ""
      # Configuration of docker-push target
      # Type: dict
      docker_pull:
        # Default connection ID
        # Type: str
        default: ""

    # This variable can be uncommented to setup custom image name for REST packager
    # Type: string
    # image: custom-image:1.0

  triton:
    default_triton_base_image_tag: "20.11-py3"


# Service account used to upload odahu resources via odahuflowctl
resource_uploader_sa: {}
#resource_uploader_sa:
#  client_id: some-client-id
#  client_secret: client-secret

# OpenID provider url
oauth_oidc_issuer_url: ""

security:
  # If true â€“ authentication inside cluster is enabled
  mesh_authn: false